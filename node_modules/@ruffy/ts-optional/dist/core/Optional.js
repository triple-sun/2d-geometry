"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.none = exports.optional = exports.some = exports.Optional = void 0;
/**
 * Represents a value that might or might not be.
 * The API is inspired from Option in scala. You operate on this type
 * like you would on an array, allowing you to chain possible mappings operations
 * that will happen if a value is defined (of type Some),
 * and will not happen if the value is undefined (of type None).
 */
var Optional = /** @class */ (function () {
    function Optional() {
    }
    Optional.of = function (value) {
        if (value) {
            return new Some(value);
        }
        return None.nil;
    };
    return Optional;
}());
exports.Optional = Optional;
var None = /** @class */ (function (_super) {
    __extends(None, _super);
    function None() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    None.prototype.map = function (f) {
        return None.nil;
    };
    None.prototype.filter = function (f) {
        return None.nil;
    };
    None.prototype.nonEmpty = function () {
        return false;
    };
    None.prototype.flatMap = function (f) {
        return None.nil;
    };
    None.prototype.get = function () {
        throw Error('Cannot get value of None');
    };
    None.prototype.getOrElse = function (val) {
        return val;
    };
    None.prototype.isEmpty = function () {
        return true;
    };
    None.prototype.foreach = function (f) {
        return None.nil;
    };
    None.nil = new None();
    return None;
}(Optional));
var Some = /** @class */ (function (_super) {
    __extends(Some, _super);
    function Some(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Some.prototype.map = function (f) {
        return some(f(this.value));
    };
    Some.prototype.nonEmpty = function () {
        return true;
    };
    Some.prototype.filter = function (f) {
        return f(this.value) ? this : exports.none;
    };
    Some.prototype.foreach = function (f) {
        f(this.value);
        return this;
    };
    Some.prototype.flatMap = function (f) {
        return f(this.value);
    };
    Some.prototype.get = function () {
        return this.value;
    };
    Some.prototype.getOrElse = function (val) {
        return this.value;
    };
    Some.prototype.isEmpty = function () {
        return false;
    };
    return Some;
}(Optional));
/**
 * Returns the value wrapped in Some.
 * @param value
 */
function some(value) {
    return new Some(value);
}
exports.some = some;
/**
 * Returns the value wrapped in Optional
 * @param value
 */
function optional(value) {
    return Optional.of(value);
}
exports.optional = optional;
/**
 * Represents undefined.
 */
exports.none = None.nil;
//# sourceMappingURL=Optional.js.map