"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Optional_1 = require("./Optional");
test('Optional.of should return Some if defined', function () {
    expect(Optional_1.optional(1).isEmpty()).toBeFalsy();
});
test('Optional.of should return None if undefined', function () {
    expect(Optional_1.optional(undefined).isEmpty()).toBeTruthy();
});
test('None.filter should return None', function () {
    expect(Optional_1.none.filter(function (a) { return false; })).toBe(Optional_1.none);
    expect(Optional_1.none.filter(function (a) { return true; })).toBe(Optional_1.none);
});
test('Some.filter should return some if filter true else none', function () {
    expect(Optional_1.some(2).filter(function (a) { return false; })).toBe(Optional_1.none);
    expect(Optional_1.some(2).filter(function (a) { return true; })).toEqual(Optional_1.some(2));
});
test('Some.foreach should call method and return some again', function () {
    var changedMe = 0;
    var someVal = Optional_1.some(2);
    expect(someVal.foreach(function (v) { return changedMe = v; })).toEqual(someVal);
    expect(changedMe).toEqual(2);
});
test('None.map should return None', function () {
    var none = Optional_1.optional(undefined);
    expect(none.map(function (a) { return 2 * a; })).toBe(none);
});
test('None.foreach should do nothing and return itself', function () {
    var changedMe = 0;
    var noneVal = Optional_1.optional(undefined);
    expect(noneVal.foreach(function (a) { return changedMe = a; })).toEqual(Optional_1.none);
    expect(changedMe).toEqual(0);
});
test('None.nonEmpty should return false', function () {
    expect(Optional_1.none.nonEmpty()).toBeFalsy();
});
test('Some.nonEmpty should return true', function () {
    expect(Optional_1.some(2).nonEmpty()).toBeTruthy();
});
test('None.flatMap should return None', function () {
    expect(Optional_1.none.flatMap(function (a) { return Optional_1.optional(4); }));
});
test('None.get should throw Error', function () {
    expect(Optional_1.none.get).toThrow();
});
test('None.getOrElse should return else value', function () {
    expect(Optional_1.none.getOrElse(4)).toBe(4);
});
test('None.or should return else function value', function () {
    expect(Optional_1.none.or(function () { return Optional_1.some(4); })).toEqual(Optional_1.some(4));
});
test('Some.get should return value', function () {
    expect(Optional_1.some(4).get()).toEqual(4);
});
test('Some.getOrElse should return value', function () {
    expect(Optional_1.some(4).getOrElse(8)).toEqual(4);
});
test('Some.or should return value', function () {
    expect(Optional_1.some(4).or(function () { return Optional_1.some(8); })).toEqual(Optional_1.some(4));
});
test('Some.flatMap should return Optional', function () {
    expect(Optional_1.some(2).flatMap(function (a) { return Optional_1.some(4); })).toEqual(Optional_1.some(4));
    expect(Optional_1.some(2).flatMap(function (a) { return Optional_1.none; })).toEqual(Optional_1.none);
});
test('Some.map should return Some with mapped value', function () {
    var val = Optional_1.some(2);
    expect(val.map(function (a) { return 2 * a; })).toEqual(Optional_1.some(4));
});
//# sourceMappingURL=Optional.test.js.map